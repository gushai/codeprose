package org.codeprose.util

import scala.concurrent._
import java.io.File
import scala.io.Source
import scala.sys.process._
import ExecutionContext.Implicits.global
import com.typesafe.scalalogging.LazyLogging

/**
 * Contains tools to work with an ensime-server.
 */
object EnsimeServerUtil extends LazyLogging {

  /**
   * Starts an ensime-server for a given ensime-file.
   * @param   ensimeFile  Ensime file.
   * @return              Ensime-server process.   
   */
	def startEnsimeServer(ensimeFile: File) : Process ={

		// check if file exists
    if(!ensimeFile.exists){
      throw new Exception("The Ensime file does not exsits. Can not start server.")
    }
    
      val startCmd = new EnsimeServerStartCommand(ensimeFile)
      val serverProcess = Process(startCmd.getStartCmd()).run()
      serverProcess
	}

  /**
   * Returns the port to the ensime-server by reading the port file 
   * generated by the ensime-server.
   * 
   * Tries to read the port file. There are a maximum of 3 trials which
   * are 1 sec apart. 
   * 
   * @param   ensimeFile  Ensime file used to derive the port file path.
   * @return              Future[Int] of the port.
   */
	def getPort(ensimeFile: File) : Future[Int] = {
			val numOfTries = 0
			val maxNumOfTrials = 3
			val timeToWaitMs = 1000
      val pathToEnsimePort = getPathToPortFile(ensimeFile: File)
      
      logger.info("Path to ensime port file: " + pathToEnsimePort) 
      
      val port : Future[Int] = Future {

				while(!pathToEnsimePort.exists() && numOfTries<maxNumOfTrials){
          logger.info("Waiting for port file (" + (maxNumOfTrials-numOfTries)*timeToWaitMs + " ms left)")
					Thread.sleep(timeToWaitMs)          
				}
				if (pathToEnsimePort.exists()){
					readPortFromPortFile(pathToEnsimePort) 
				} else { 
					-1
				}
			}
			port
	}
   
  /**
   * Returns the ensime port file.
   * @param   ensimeFile  Ensime file.
   * @return              Ensime port file.
   */
  def getPathToPortFile(ensimeFile: File) : File = {
    new File(ensimeFile.getParentFile().getAbsolutePath() + s"""/.ensime_cache/port""")
  }
  
  /**
   * Returns the port in the ensime port file.
   * @param   ensimePortFile  Ensime port file.
   * @return                  Ensime-server port.
   */
  def readPortFromPortFile(pathToEnsimePort: File) : Int = {
    val lines = Source.fromFile(pathToEnsimePort).getLines().mkString
    lines.toInt
  } 

}

/**
 * Command to start the ensime server.
 * 
 * TODO:  Rewrite needed!
 *  
 */
private class EnsimeServerStartCommand(ensimeFilePath: File) {

  /**
   * Returns the command to start an ensime server.
   * @return  Command to start ensime server.
   */
	def getStartCmd() : String = {
    ???
	}

}
